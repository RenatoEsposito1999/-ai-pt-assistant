‚úÖ Flusso completo del caso d‚Äôuso "Registrazione"
1Ô∏è‚É£ L‚Äôutente clicca il bottone nella View
La View cattura l‚Äôevento ma non contiene logica.
Il bottone ha un listener legato a un metodo nel Controller.
2Ô∏è‚É£ Controller
Raccoglie i dati dal form (nome, email, password‚Ä¶).
Richiama il metodo nel Service, passando questi dati.
3Ô∏è‚É£ Service
Applica la logica applicativa (es. verifica che l‚Äôemail non esista gi√†).
Istanzia il Model (es. PersonalTrainer).
Chiama il DAO per salvare nel database.
4Ô∏è‚É£ DAO
Esegue la vera operazione SQL (INSERT nel DB).
Restituisce al Service l‚Äôesito.
üîÅ SE VIENE TUTTO OK:
Il Service restituisce un ‚ÄúOK‚Äù al Controller.
Il Controller aggiorna la View (es. ‚Äúregistrazione completata‚Äù).


Quindi creo il model, creo il dao che √® la connessione al db e eventuali funzioni che fanno contorlli a livello di db, vado nel service e do questo dao, nel service c'√® la logica di business dell'app
il service dunque √® chiamato dal controller dell'entit√†. 

# Compila
javac --module-path $PATH_TO_FX --add-modules javafx.controls,javafx.fxml -cp "lib/*" -d out src/**/*.java

# Esegui
java --module-path $PATH_TO_FX --add-modules javafx.controls,javafx.fxml -cp "out:lib/*" src.MainApp
